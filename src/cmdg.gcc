#!/bin/bash

# targets (default)
TARGET='cmdg ssh2'

# all targets
TARGET_all='gtkview cmdg lock vt100 escseq conf'

# environment settings
#READ_SHELL_THREAD=1
GTK_DIR=/usr/include
GTK_LIB=/usr/lib/i386-linux-gnu

# targets parse(1) (and options)
argv=
for s in $@ ; do
	case ${s%%=*} in
		--gtk-dir)
			GTK_DIR="${s#*=}"
			continue
			;;
		--gtk-lib)
			GTK_LIB="${s#*=}"
			continue
			;;
		--pts-use)
			use_pts=1
			continue
			;;
		*)
			if test x"-D" = x"${s:0:2}" ; then
				CFLAGS="$CFLAGS $s"
				continue
			fi
			;;
	esac
	case "$s" in
		-c|--no-link)
			nolink=1
			;;
		-S)
			assemble_only=1
			;;
		--help)
			is_help=1
			;;
		*)
			argv="$argv $s"
			test x" $s" = x"$argv" && argv="$s"
			;;
	esac
done

# help
if test x1 '=' x$is_help ; then
	echo 'usage:'
	echo -e '   \033[1;34m1. full build\033[0m'
	echo    "      ${0##*/} all"
	echo -e '   \033[1;34m2. pickup build\033[0m'
	echo    "      ${0##*/} [TARGET(s)]"
	echo -e '   \033[1;34m3. compile only\033[0m'
	echo    "      ${0##*/} [-c|--no-link] TARGET(s)"
	echo -e '   \033[1;34m4. assemble only\033[0m'
	echo    "      ${0##*/} -S TARGET(s)"
	exit 0
fi

# targets (performance tuning)
if test ! x '=' x$READ_SHELL_THREAD ; then
	echo 'use thread to read shell.'
	CFLAGS="$CFLAGS -DREAD_SHELL_THREAD"
fi

# targets (use pts instead of SSH)
if test x '=' x$use_pts ; then
	not_enough=
	test ! -f aes.c && not_enough=1
	test ! -f sha1.c && not_enough=1
	test ! -f sha2.c && not_enough=1
	if test x1 '=' x$not_enough ; then
		echo -e '\033[1;31mWARNING\033[0m:'
		echo -e 'In this version, original aes.c sha1.c sha2.c is \033[1;31mnot implemented\033[0m.'
		echo -e "Please build pts-mode by \033[1;31m'--pts-use' option\033[0m, or \033[1;31mprepare"
		echo -e 'aes.c sha1.c sha2.c\033[0m fitting to aes.h sha1.h sha2.h interface.'
		echo    'It is hard to upload temporarily implements calling present AES SHA'
		echo -e 'libraries \033[1;31mfor keeping MIT-license\033[0m, because most of these libraries'
		echo    'seem to choose licence other than MIT-license.'
		exit 1
	fi
	TARGET_all="$TARGET_all ssh2 aes sha2 sha1 intv rand base64"
else
	TARGET_all="$TARGET_all ptmx"
	CFLAGS="$CFLAGS -DSSH_NOT_AVAILABLE"
fi

# targets parse(2)
if test xall = x"$argv" ; then
	TARGET="$TARGET_all"
elif test ! x = x"$argv" ; then
	TARGET="$argv"
fi

# imports
CFLAGS="$CFLAGS -I$GTK_DIR/gtk-2.0"          # gtk/gtk.h ..
CFLAGS="$CFLAGS -I$GTK_DIR/glib-2.0"         # gio/gio.h .. (from gdk/gdkapplaunchcontext.h ..)
CFLAGS="$CFLAGS -I$GTK_LIB/glib-2.0/include" # glibconfig.h .. (from glib/gtypes.h ..)
CFLAGS="$CFLAGS -I$GTK_DIR/cairo"            # cairo.h .. (from gdk/gdkscreen.h)
CFLAGS="$CFLAGS -I$GTK_DIR/pango-1.0"        # pango/pango.h .. (from gdk/gdktypes.h ..)
CFLAGS="$CFLAGS -I$GTK_DIR/gdk-pixbuf-2.0"   # gdk-pixbuf/gdk-pixbuf.h .. (from gdkpixbuf.h ..)
CFLAGS="$CFLAGS -I$GTK_DIR/atk-1.0"          # atk/atk.h .. (from gtk/gtkwidget.h ..)
CFLAGS="$CFLAGS -I$GTK_LIB/gtk-2.0/include"  # gdkconfig.h (from gdk/gdktypes.h)
CFLAGS="-I. $CFLAGS"

LDFLAGS="-Wl,--library-path=$GTK_LIB -lgtk-x11-2.0"
LDFLAGS="$LDFLAGS -lgdk-x11-2.0" # gdk_drawable_set_colormap ..
LDFLAGS="$LDFLAGS -lcairo" # cairo_paint ..
LDFLAGS="$LDFLAGS -lgdk_pixbuf-2.0" # gdk_pixbuf_new_from_data ..
LDFLAGS="$LDFLAGS -lpango-1.0" # pango_context_get_language ..
LDFLAGS="$LDFLAGS -lgobject-2.0" # g_object_get_qdata ..
LDFLAGS="$LDFLAGS -lglib-2.0" # g_remove_source ..
LDFLAGS="$LDFLAGS -lpthread" # pthread_create ..

# as only
if test x1 = x"$assemble_only" ; then
	for s in `echo $TARGET` ; do
		rm -f $s.o ; gcc -masm=intel -std=c99 $CFLAGS -S -o $s.S $s.c
	done
	exit 1
fi

# c99
if test ! -d obj ; then
	mkdir obj || exit 1
fi
for s in `echo $TARGET` ; do
	case $s in
		*)
			rm -f obj/$s.o ; gcc -std=c99 $CFLAGS -c -o obj/$s.o $s.c
			;;
	esac
done

# ld
MYSELF=${0##*/} && APP=${MYSELF%\.*}
if test x '=' x"$nolink" ; then
	gcc -o $APP obj/${TARGET_all// /.o obj\/}.o $LDFLAGS
fi
